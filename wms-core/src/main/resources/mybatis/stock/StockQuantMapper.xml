<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lsh.wms.core.dao.stock.StockQuantDao" >

	<resultMap id="stockQuantResultMap" type="StockQuant">
		<id property="id" column="id"/>
		<result property="skuId" column="sku_id"/>
		<result property="locationId" column="location_id"/>
		<result property="containerId" column="container_id"/>
		<result property="qty" column="qty"/>
		<result property="packUnit" column="pack_unit"/>
		<result property="packName" column="pack_name"/>
		<result property="value" column="value"/>
		<result property="cost" column="cost"/>
		<result property="reserveTaskId" column="reserve_task_id"/>
		<result property="isFrozen" column="is_frozen"/>
		<result property="supplierId" column="supplier_id"/>
		<result property="ownerId" column="owner_id"/>
		<result property="lotId" column="lot_id"/>
		<result property="inDate" column="in_date"/>
		<result property="expireDate" column="expire_date"/>
		<result property="createdAt" column="created_at"/>
		<result property="updatedAt" column="updated_at"/>
		<result property="itemId" column="item_id"/>
		<result property="isDefect" column="is_defect"/>
		<result property="isRefund" column="is_refund"/>
		<result property="isNormal" column="is_normal"/>
		<result property="isInhouse" column="is_inhouse"/>
		<result property="lotCode" column="lot_code"/>
	</resultMap>
  
	<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="StockQuant">
		insert into stock_quant (
			sku_id,
			location_id,
			container_id,
			qty,
			reserve_task_id,
			value,
			cost,
			pack_unit,
			pack_name,
			is_frozen,supplier_id,owner_id,lot_id,
			in_date,expire_date,created_at,updated_at,item_id,is_defect,is_refund,is_normal,is_inhouse,lot_code
    	) values (
			#{skuId},#{locationId},#{containerId},#{qty},#{reserveTaskId},#{value},
			#{cost},#{packUnit},#{packName},#{isFrozen},#{supplierId},#{ownerId},#{lotId},
			#{inDate},#{expireDate},#{createdAt},#{updatedAt},#{itemId},#{isDefect},#{isRefund},#{isNormal},#{isInhouse},#{lotCode}
    	)
	</insert>

	<insert id="moveToComplete"  parameterType="long">
		insert into stock_quant_complete select * from stock_quant where id = #{id}
	</insert>

	<delete id="remove" parameterType="long">
		delete from stock_quant where id = #{id}
	</delete>

	<delete id="cleanZeroQuant" parameterType="StockQuant">
		delete from stock_quant where id=#{id} and qty = 0
	</delete>

	<update id="moveQuant" parameterType="StockQuant">
		update stock_quant
		<set>
			location_id = #{locationId},
			container_id = #{containerId},
			updated_at = #{updatedAt}
		</set>
		where id = #{id}
	</update>

	<update id="update" parameterType="StockQuant">
		update stock_quant
    	<set>
  			<if test="skuId != null">sku_id=#{skuId},</if>
  			<if test="locationId != null">location_id=#{locationId},</if>
  			<if test="containerId != null">container_id=#{containerId},</if>
  			<if test="qty != null">qty=#{qty},</if>
			<if test="reserveTaskId != null">reserve_task_id=#{reserveTaskId},</if>
  			<if test="value != null">value=#{value},</if>
  			<if test="cost != null">cost=#{cost},</if>
  			<if test="packUnit != null">pack_unit=#{packUnit},</if>
			<if test="packName != null">pack_name=#{packName},</if>
  			<if test="isFrozen != null">is_frozen=#{isFrozen},</if>
  			<if test="supplierId != null">supplier_id=#{supplierId},</if>
  			<if test="ownerId != null">owner_id=#{ownerId},</if>
  			<if test="lotId != null">lot_id=#{lotId},</if>
  			<if test="inDate != null">in_date=#{inDate},</if>
  			<if test="expireDate != null">expire_date=#{expireDate},</if>
  			<if test="createdAt != null">created_at=#{createdAt},</if>
  			<if test="updatedAt != null">updated_at=#{updatedAt},</if>
			<if test="itemId != null">item_id=#{itemId},</if>
			<if test="isDefect != null">is_defect=#{isDefect},</if>
			<if test="isRefund != null">is_refund=#{isRefund},</if>
			<if test="isNormal != null">is_normal=#{isNormal},</if>
			<if test="isInhouse != null">is_inhouse=#{isInhouse},</if>
			<if test="lotCode != null">lot_code=#{lotCode}</if>
		</set>
		where id=#{id}
	</update>
	<update id="changeQty" parameterType="StockQuant">
		update stock_quant
		<set>
			qty=qty - #{delta},
			updated_at=#{updatedAt}
		</set>
		where id=#{id} and qty - #{delta} &gt;= 0
	</update>
  
	<select id="getStockQuantById" parameterType="long" resultMap="stockQuantResultMap">
		select * from stock_quant
		where ID=#{id} 
	</select>
	<select id="getLotByLocationId" parameterType="long" resultType="long">
		select distinct lot_id from stock_quant
		where location_id=#{locationId}
	</select>

	<select id="getContainerIdByLocationId" parameterType="long" resultType="long">
		select distinct container_id from stock_quant
		where location_id=#{locationId}
	</select>

	<select id="getLocationIdByContainerId" parameterType="long" resultType="long">
		select distinct location_id from stock_quant
		where container_id=#{containerId}
	</select>

	<select id="countStockQuant" parameterType="map" resultType="int">
		select count(*) from stock_quant
		<include refid="queryCondition"/>
	</select>
  
	<select id="getStockQuantList" parameterType="map" resultMap="stockQuantResultMap">
		select * from stock_quant
		<include refid="queryCondition"/>
		<if test="start != null and limit != null">
		limit #{start},#{limit}
		</if>
	</select>

	<select id="getQty" parameterType="map" resultType="java.math.BigDecimal">
		select sum(qty) from stock_quant
		<include refid="queryCondition"/>
	</select>

	<select id="getQuants" parameterType="map" resultMap="stockQuantResultMap" flushCache="true"   useCache="false">
		select * from stock_quant
		<include refid="queryCondition"/>
		<choose>
			<when test=" strategy == 'FIFO' ">ORDER BY ITEM_ID, IN_DATE</when>
			<when test=" strategy == 'FEFO' ">ORDER BY ITEM_ID, EXPIRE_DATE</when>
			<otherwise>
				ORDER BY ITEM_ID, EXPIRE_DATE
			</otherwise>
		</choose>
		<if test="start != null and limit != null">
			limit #{start},#{limit}
		</if>
	</select>

	<select id="getItemLocationList" parameterType="map" resultMap="stockQuantResultMap">
		select id, sku_id,
		location_id,
		container_id,
		sum(qty) as qty,
		reserve_task_id,
		value,
		cost,
		pack_unit,
		pack_name,
		is_frozen,supplier_id,owner_id,lot_id,
		in_date,expire_date,created_at,updated_at,item_id,is_defect,is_refund,is_normal,is_inhouse,lot_code
		from stock_quant
		<include refid="queryCondition"/>
		  group by item_id, location_id
		<if test="start != null and limit != null">
			limit #{start},#{limit}
		</if>
	</select>

	<select id="countItemLocation" parameterType="map" resultType="int">
		select count(*) from stock_quant
		<include refid="queryCondition"/>
		  group by item_id, location_id
	</select>

	<select id="lock" parameterType="map" resultMap="stockQuantResultMap">
		select * from stock_quant
		<include refid="queryCondition"/>
		 for update
	</select>

  
	<sql id="queryCondition">
		<where>
			<if test="id != null and id != 0">id=#{id}</if>
			<if test="skuId != null and skuId != 0">sku_id=#{skuId}</if>
			<if test="locationList != null">
				and
				<foreach collection="locationList"  item="item" index="index" open="(" separator="or"  close=")">
					( ${item.getLocationId()} &lt;= location_id and location_id &lt;= ${item.getRightRange()} )
				</foreach>
			</if>
			<if test="itemList != null">
				and item_id in
				<foreach collection="itemList"  item="item" index="index" open="(" separator=","  close=")">
					#{item}
				</foreach>
			</if>
			<if test="locationId != null">and location_id=#{locationId}</if>
			<if test="containerId != null and containerId != 0">and container_id=#{containerId}</if>
			<if test="reserveTaskId != null">and reserve_task_id=#{reserveTaskId}</if>
			<if test="packUnit != null and packUnit != 0">and pack_unit=#{packUnit}</if>
			<if test="packName != null">and pack_name=#{packName}</if>
			<if test="isFrozen != null">and is_frozen=#{isFrozen}</if>
			<if test="supplierId != null and supplierId != 0">and supplier_id=#{supplierId}</if>
			<if test="ownerId != null and ownerId != 0">and owner_id=#{ownerId}</if>
			<if test="lotId != null and lotId != 0">and lot_id=#{lotId}</if>
			<if test="inDate != null">and in_date=#{inDate}</if>
			<if test="expireDate != null">and expire_date=#{expireDate}</if>
			<if test="itemId != null and itemId != 0">and item_id=#{itemId}</if>
			<if test="canUnFreeze != null and canUnfreeze != false">and (is_frozen = 1 or is_defect = 1 or is_refund = 1)</if>
			<if test="isNormal != null">and is_normal=#{isNormal}</if>
			<if test="isDefect != null">and is_defect=#{isDefect}</if>
			<if test="isRefund != null">and is_refund=#{isRefund}</if>
			<if test="isInhouse != null">and is_inhouse=#{isInhouse}</if>
			<if test="lotCode != null">and lot_code=#{lotCode}</if>
			<if test="abnormalList != null">
				and location_id not in
				<foreach collection="abnormalList"  item="item" index="index" open="(" separator=","  close=")">
					#{item}
				</foreach>
			</if>
			<if test="excludeLocationList != null">
				and
				<foreach collection="excludeLocationList"  item="item" index="index" open="(" separator="and"  close=")">
					( ${item.getLocationId()} &gt; location_id or location_id &gt; ${item.getRightRange()} )
				</foreach>
			</if>
			<if test="includeLocationList != null">
				and
				<foreach collection="includeLocationList"  item="item" index="index" open="(" separator="or"  close=")">
					( ${item.getLocationId()} <![CDATA[<= ]]>  location_id and location_id <![CDATA[<= ]]>  ${item.getRightRange()} )
				</foreach>
			</if>
			<if test="itemIdList != null">
				and item_id in
				<foreach collection="itemIdList"  item="item" index="index" open="(" separator=","  close=")">
					#{item}
				</foreach>
			</if>
		</where>
	</sql>



</mapper>
